<div dir="rtl">

#  دیزاین پترن ها در پایتون 


## الگوهای آفرینشی (Creational Pattern) 


### الگوی کارخانه (Factory Pattern)
الگوی کارخانه یک الگوی تولید اشیاء است که به شما اجازه می‌دهد بدون مشخص کردن کلاس‌های دقیق، نمونه‌هایی از کلاس‌های مرتبط را ایجاد کنید.

####  موارد استفاده از این دیزاین پترن: 
+ زمانی که کلاس‌ها نمی‌توانند نوع دقیق اشیائی که باید ایجاد شوند را از قبل بدانند.
+ برای جلوگیری از ایجاد وابستگی قوی بین کلاس‌های مشتری و کلاس‌های محصولات.
+ هنگام کار با خانواده‌ای از اشیاء مرتبط.

#### نکات مثبت این دیزاین پترن: 
+ کاهش اتصال بین کلاس‌ها.
+ تسهیل در افزودن اشیاء جدید بدون تغییر کدهای موجود.
+ افزایش انعطاف‌پذیری در کد.

####  نکات منفی این دیزاین پترن: 
+ ممکن است کد را پیچیده‌تر کند.
+ سختی در درک جریان ایجاد اشیاء برای تازه‌واردان.

---

### الگوی کارخانه انتزاعی (Abstract Factory Pattern) 
این الگو رابطی برای ایجاد خانواده‌ای از اشیاء مرتبط یا وابسته بدون مشخص کردن کلاس‌های دقیق فراهم می‌کند.

####  موارد استفاده از این دیزاین پترن: 
+ زمانی که سیستم باید مستقل از نحوه ایجاد و ترکیب اشیاء باشد.
+ برای کار با چندین خانواده از محصولات مرتبط.

#### نکات مثبت این دیزاین پترن: 
+ جداسازی کد ایجاد از کد استفاده.
+ تضمین سازگاری بین اشیاء ایجاد شده.
+ تسهیل در تعویض خانواده‌های محصولات.

####  نکات منفی این دیزاین پترن: 
+ پیچیدگی بیشتر نسبت به الگوهای ساده‌تر.
+ افزودن خانواده‌های جدید محصولات دشوار است.

---

### الگوی سازنده (Builder Pattern) 
الگوی سازنده برای ساخت اشیاء پیچیده با جزئیات زیاد استفاده می‌شود، با جداسازی ساخت از نمایش آن‌ها.

####  موارد استفاده از این دیزاین پترن: 
+ زمانی که فرآیند ساخت یک شیء باید از بخش‌های متفاوت تشکیل شود.
+ برای ایجاد اشیائی که مراحل ساخت پیچیده‌ای دارند.
+ هنگامی که می‌خواهید ساخت اشیاء مختلف با استفاده از همان کد انجام شود.

#### نکات مثبت این دیزاین پترن: 
+ جداسازی کد ساخت از نمایش.
+ امکان استفاده مجدد از کد ساخت برای اشیاء مختلف.
+ افزایش کنترل بر فرآیند ساخت.

####  نکات منفی این دیزاین پترن: 
+ پیچیدگی بیشتر با افزودن کلاس‌های سازنده متعدد.
+ ممکن است برای اشیاء ساده غیرضروری باشد.

---

### الگوی تک‌نمونه (Singleton Pattern) 
این الگو تضمین می‌کند که تنها یک نمونه از یک کلاس وجود داشته باشد و دسترسی سراسری به آن را فراهم می‌کند.

####  موارد استفاده از این دیزاین پترن: 
+ مدیریت منابع محدود مانند اتصالات پایگاه داده.
+ پیاده‌سازی رجیستری‌های جهانی.
+ زمانی که نیاز به کنترل دسترسی به یک منبع واحد دارید.

#### نکات مثبت این دیزاین پترن: 
+ جلوگیری از ایجاد چندین نمونه غیرضروری.
+ کنترل مرکزی بر روی یک شیء خاص.
+ صرفه‌جویی در منابع سیستمی.

####  نکات منفی این دیزاین پترن: 
+ مشکلات در تست واحد و ایجاد وابستگی‌های پنهان.
+ نقض اصل مسئولیت واحد (SRP).
+ می‌تواند باعث ایجاد نقاط تنگنا شود.

---

### الگوی نمونه‌برداری (Prototype Pattern) 
این الگو اجازه می‌دهد تا اشیاء جدید با کپی کردن یک نمونه اولیه (پروتوتایپ) ایجاد شوند.

####  موارد استفاده از این دیزاین پترن: 
+ زمانی که ایجاد اشیاء هزینه‌بر است و کپی کردن آن‌ها ارزان‌تر است.
+ برای جلوگیری از ایجاد سلسله‌مراتب کلاس‌های اضافی.

#### نکات مثبت این دیزاین پترن: 
+ بهبود عملکرد با کپی کردن اشیاء.
+ ایجاد اشیائی با مقادیر اولیه سفارشی.

####  نکات منفی این دیزاین پترن: 
+ پیچیدگی در پیاده‌سازی کپی عمیق و سطحی.
+ سختی در درک و نگهداری کد.

---

## الگوهای ساختاری(Structural Pattern) 

### الگوی آداپتور (Adapter Pattern) 
الگوی آداپتور رابط یک کلاس موجود را به رابطی که کلاینت‌ها انتظار دارند تبدیل می‌کند.

####  موارد استفاده از این دیزاین پترن: 
+ زمانی که می‌خواهید از کلاسی استفاده کنید که رابط آن با نیازهای شما سازگار نیست.
+ برای استفاده مجدد از کدهای موجود بدون تغییر در ساختار آن‌ها.

#### نکات مثبت این دیزاین پترن: 
+ افزایش قابلیت استفاده مجدد از کدها.
+ تسهیل در یکپارچه‌سازی سیستم‌های ناسازگار.

####  نکات منفی این دیزاین پترن: 
+ ممکن است کد را پیچیده‌تر کند.
+ افزودن لایه اضافی ممکن است به عملکرد آسیب بزند.

---

### الگوی پل (Bridge Pattern) 
این الگو جداسازی انتزاع از پیاده‌سازی را فراهم می‌کند، به طوری که هر دو می‌توانند مستقل از هم تغییر کنند.

####  موارد استفاده از این دیزاین پترن: 
+ زمانی که نمی‌خواهید کد انتزاع و پیاده‌سازی به هم وابسته باشند.
+ برای جلوگیری از انفجار ترکیبی کلاس‌ها در سلسله مراتب ارث‌بری.

#### نکات مثبت این دیزاین پترن: 
+ افزایش انعطاف‌پذیری در توسعه.
+ تسهیل در نگهداری و توسعه سیستم.

####  نکات منفی این دیزاین پترن: 
+ پیچیدگی بیشتر در ساختار کد.
+ سختی در درک برای برنامه‌نویسان تازه‌کار.

---

### الگوی ترکیب (Composite Pattern) 
این الگو اجازه می‌دهد اشیاء را به صورت ساختار درختی سازماندهی کنید و با اشیاء منفرد و ترکیبی به صورت یکنواخت رفتار کنید.

####  موارد استفاده از این دیزاین پترن: 
+ زمانی که می‌خواهید ساختارهای سلسله‌مراتبی را نمایش دهید.
+ برای اعمال عملیات مشابه بر روی اشیاء منفرد و ترکیبی.

#### نکات مثبت این دیزاین پترن: 
+ ساده‌سازی کد کلاینت.
+ تسهیل در افزودن عناصر جدید به ساختار.

####  نکات منفی این دیزاین پترن: 
+ ممکن است طراحی را پیچیده‌تر کند.
+ کنترل کمتر بر روی اعضای منفرد در مجموعه.

---

### الگوی دکوراتور (Decorator Pattern) 
این الگو به شما اجازه می‌دهد تا رفتارهای جدید را به اشیاء اضافه کنید بدون تغییر در کد اصلی آن‌ها.

####  موارد استفاده از این دیزاین پترن: 
+ افزودن قابلیت‌های اضافی به اشیاء در زمان اجرا.
+ برای جلوگیری از ایجاد تعداد زیادی زیرکلاس‌ها.

#### نکات مثبت این دیزاین پترن: 
+ انعطاف‌پذیری بالا در افزودن قابلیت‌ها.
+ پیروی از اصل باز/بسته (Open/Closed Principle).

####  نکات منفی این دیزاین پترن: 
+ ممکن است منجر به ایجاد تعداد زیادی از اشیاء کوچک شود.
+ پیچیدگی در اشکال‌زدایی (Debugging).

---

### الگوی فاساد (Facade Pattern) 
الگوی فاساد یک رابط ساده و یکپارچه برای یک سیستم پیچیده یا مجموعه‌ای از زیرسیستم‌ها فراهم می‌کند.

####  موارد استفاده از این دیزاین پترن: 
+ ساده‌سازی رابط کاربری با سیستم‌های پیچیده.
+ ارائه نقطه ورودی واحد به زیرسیستم‌های متعدد.

#### نکات مثبت این دیزاین پترن: 
+ کاهش پیچیدگی برای کاربران.
+ جداسازی کد کلاینت از سیستم‌های زیربنایی.

####  نکات منفی این دیزاین پترن: 
+ ممکن است تمام قابلیت‌های زیرسیستم‌ها را در بر نگیرد.
+ افزودن لایه اضافی ممکن است به عملکرد آسیب بزند.

---

### الگوی فلوِیت (Flyweight Pattern) 
این الگو تعداد زیادی از اشیاء ریزدانه را با به اشتراک‌گذاری داده‌های مشترک بهینه می‌کند.

####  موارد استفاده از این دیزاین پترن: 
+ زمانی که تعداد زیادی از اشیاء مشابه دارید که بار حافظه ایجاد می‌کنند.
+ برای کاهش مصرف حافظه با به اشتراک‌گذاری داده‌های تکراری.

#### نکات مثبت این دیزاین پترن: 
+ کاهش مصرف حافظه.
+ بهبود عملکرد برنامه.

####  نکات منفی این دیزاین پترن: 
+ افزایش پیچیدگی کد.
+ ممکن است کد کمتر شهودی شود.

---

### الگوی پروکسی (Proxy Pattern) 
الگوی پروکسی یک جایگزین یا نماینده برای شیء اصلی فراهم می‌کند تا دسترسی به آن را کنترل کند.

####  موارد استفاده از این دیزاین پترن: 
+ کنترل دسترسی به منابع در شبکه.
+ افزودن قابلیت‌های اضافی قبل یا بعد از دسترسی به شیء.

#### نکات مثبت این دیزاین پترن: 
+ افزایش امنیت و کنترل.
+ مدیریت بهینه منابع.

####  نکات منفی این دیزاین پترن: 
+ افزایش پیچیدگی.
+ ممکن است به عملکرد آسیب بزند.

---

## الگوهای رفتاری(Behavioral Pattern) 

### الگوی زنجیره مسئولیت (Chain of Responsibility Pattern) 
این الگو یک زنجیره از شیء‌ها را ایجاد می‌کند که درخواست را تا زمانی که یکی از آن‌ها آن را رسیدگی کند، ارسال می‌کنند.

####  موارد استفاده از این دیزاین پترن: 
+ زمانی که بیش از یک شیء می‌تواند به یک درخواست پاسخ دهد.
+ برای جداسازی فرستنده درخواست از گیرنده آن.

#### نکات مثبت این دیزاین پترن: 
+ کاهش اتصال بین فرستنده و گیرنده.
+ انعطاف‌پذیری در اضافه یا حذف دریافت‌کننده‌ها.

####  نکات منفی این دیزاین پترن: 
+ ممکن است درخواست بدون رسیدگی باقی بماند.
+ دشواری در پیگیری جریان درخواست.

---

### الگوی فرمان (Command Pattern) 
الگوی فرمان یک درخواست را به عنوان یک شیء کپسوله می‌کند و به شما اجازه می‌دهد درخواست‌ها را پارامتریک کنید.

####  موارد استفاده از این دیزاین پترن: 
+ پیاده‌سازی عملیات undo/redo.
+ صف‌بندی درخواست‌ها و عملیات تاخیری.

#### نکات مثبت این دیزاین پترن: 
+ جداسازی درخواست از گیرنده.
+ تسهیل در افزودن دستورات جدید.

####  نکات منفی این دیزاین پترن: 
+ افزایش تعداد کلاس‌ها.
+ ممکن است پیچیدگی را افزایش دهد.

---

### الگوی مفسر (Interpreter Pattern) 
این الگو یک راه برای ارزیابی جملات گرامری در زبان‌های خاص دامنه (DSL) فراهم می‌کند.

####  موارد استفاده از این دیزاین پترن: 
+ پیاده‌سازی زبان‌های ساده و قوانین گرامری.
+ تفسیر دستورات و عبارات.

#### نکات مثبت این دیزاین پترن: 
+ تسهیل در افزودن قوانین جدید.
+ ساختار کد واضح برای زبان‌های ساده.

####  نکات منفی این دیزاین پترن: 
+ عملکرد پایین برای زبان‌های پیچیده.
+ سختی در نگهداری با افزایش تعداد قوانین.

---

### الگوی تکرارگر (Iterator Pattern) 
این الگو روشی برای دسترسی متوالی به عناصر یک مجموعه بدون افشای ساختار داخلی آن فراهم می‌کند.

####  موارد استفاده از این دیزاین پترن: 
+ پیمایش بر روی مجموعه‌های مختلف.
+ فراهم کردن رابط یکنواخت برای انواع مجموعه‌ها.

#### نکات مثبت این دیزاین پترن: 
+ جداسازی پیمایش از ساختار داده.
+ افزایش انعطاف‌پذیری در تغییر ساختار مجموعه.

####  نکات منفی این دیزاین پترن: 
+ ممکن است به عملکرد آسیب بزند.
+ پیچیدگی در پیاده‌سازی برای مجموعه‌های پویا.

---

### الگوی میانجی (Mediator Pattern) 
الگوی میانجی ارتباطات پیچیده بین اشیاء را با معرفی یک شیء میانجی ساده می‌کند.

####  موارد استفاده از این دیزاین پترن: 
+ کاهش وابستگی متقابل بین اشیاء.
+ مدیریت تعاملات پیچیده.

#### نکات مثبت این دیزاین پترن: 
+ ساده‌سازی ارتباطات.
+ افزایش قابلیت نگهداری.

####  نکات منفی این دیزاین پترن: 
+ میانجی می‌تواند به یک نقطه تنگنا تبدیل شود.
+ پیچیدگی بیشتر در شیء میانجی.

---

### الگوی یادگاری (Memento Pattern) 
این الگو حالت داخلی یک شیء را بدون نقض کپسوله‌سازی ضبط و بازیابی می‌کند.

####  موارد استفاده از این دیزاین پترن: 
+ پیاده‌سازی undo/redo.
+ ذخیره وضعیت سیستم در یک نقطه خاص.

#### نکات مثبت این دیزاین پترن: 
+ حفظ کپسوله‌سازی.
+ سادگی در بازگردانی حالت.

####  نکات منفی این دیزاین پترن: 
+ مصرف حافظه بالا.
+ پیچیدگی در مدیریت چندین یادگاری.

---

### الگوی ناظر (Observer Pattern) 
الگوی ناظر یک مکانیزم انتشار/اشتراک فراهم می‌کند، به طوری که یک شیء می‌تواند تغییرات خود را به ناظرین اعلام کند.

####  موارد استفاده از این دیزاین پترن: 
+ زمانی که تغییر در یک شیء نیاز به اطلاع‌رسانی به چندین شیء دیگر دارد.
+ پیاده‌سازی سیستم‌های رویداد محور.

#### نکات مثبت این دیزاین پترن: 
+ جداسازی بین فرستنده و گیرنده.
+ تسهیل در افزودن ناظرین جدید.

####  نکات منفی این دیزاین پترن: 
+ ممکن است منجر به نشت حافظه شود.
+ پیچیدگی در جریان داده‌ها.

---

### الگوی وضعیت (State Pattern) 
این الگو به یک شیء اجازه می‌دهد تا رفتار خود را زمانی که حالت داخلی‌اش تغییر می‌کند، تغییر دهد.

####  موارد استفاده از این دیزاین پترن: 
+ پیاده‌سازی ماشین‌های حالت.
+ زمانی که یک شیء دارای رفتارهای مختلف در حالات مختلف است.

#### نکات مثبت این دیزاین پترن: 
+ جداسازی کد مربوط به هر حالت.
+ تسهیل در افزودن حالت‌های جدید.

####  نکات منفی این دیزاین پترن: 
+ افزایش تعداد کلاس‌ها.
+ پیچیدگی در مدیریت انتقال بین حالات.

---

### الگوی استراتژی (Strategy Pattern) 
این الگو به شما اجازه می‌دهد تا الگوریتم‌های مختلف را کپسوله کنید و در زمان اجرا آن‌ها را تعویض کنید.

####  موارد استفاده از این دیزاین پترن: 
+ زمانی که می‌خواهید بین الگوریتم‌های مختلف سوئیچ کنید.
+ برای جداسازی کد انتخاب الگوریتم از کلاینت.

#### نکات مثبت این دیزاین پترن: 
+ افزایش انعطاف‌پذیری.
+ ساده‌سازی کد کلاینت.

####  نکات منفی این دیزاین پترن: 
+ افزایش تعداد کلاس‌ها.
+ کلاینت باید از تفاوت بین استراتژی‌ها آگاه باشد.

---

### الگوی الگوی قالب (Template Method Pattern) 
این الگو اسکلت یک الگوریتم را در یک متد تعریف می‌کند و پیاده‌سازی مراحل خاص را به زیرکلاس‌ها واگذار می‌کند.

####  موارد استفاده از این دیزاین پترن: 
+ زمانی که الگوریتم‌ها ساختار مشابهی دارند.
+ برای جلوگیری از تکرار کد.

#### نکات مثبت این دیزاین پترن: 
+ تسهیل در استفاده مجدد از کد.
+ کنترل بر ساختار الگوریتم.

####  نکات منفی این دیزاین پترن: 
+ محدودیت در انعطاف‌پذیری زیرکلاس‌ها.
+ وابستگی قوی بین کلاس پایه و زیرکلاس‌ها.

---

### الگوی بازدیدکننده (Visitor Pattern) 
این الگو به شما اجازه می‌دهد تا عملیات جدیدی را بدون تغییر در کلاس‌های عناصر به آن‌ها اضافه کنید.

####  موارد استفاده از این دیزاین پترن: 
+ زمانی که می‌خواهید عملیات جدیدی بر روی ساختار اشیاء انجام دهید.
+ برای جداسازی الگوریتم از ساختار داده.

#### نکات مثبت این دیزاین پترن: 
+ تسهیل در افزودن عملیات جدید.
+ پیروی از اصل تک‌مسئولیتی.

####  نکات منفی این دیزاین پترن: 
+ افزودن عناصر جدید به ساختار دشوار است.
+ پیچیدگی در پیاده‌سازی و درک کد.

---
## الگوهای معماری(Architectural Pattern) 

### الگوی مدل-نما-کنترل‌گر (Model-View-Controller - MVC)

الگوی **MVC** برنامه را به سه بخش اصلی تقسیم می‌کند: مدل (مدیریت داده‌ها و منطق کسب‌وکار)، نما (رابط کاربری) و کنترل‌گر (مدیریت تعاملات کاربر و جریان داده‌ها). این جداسازی موجب سازماندهی بهتر کد و تسهیل در توسعه و نگهداری می‌شود.

#### موارد استفاده از این دیزاین پترن:

+ توسعه برنامه‌های وب و دسکتاپ با رابط کاربری گرافیکی.
+ پروژه‌هایی که نیاز به جداسازی منطق کسب‌وکار از نمایش دارند.

####نکات مثبت این دیزاین پترن: 

+ افزایش قابلیت نگهداری و توسعه.
+ امکان کار تیمی همزمان بر روی بخش‌های مختلف.
+ تسهیل در تست واحد و یکپارچه.

#### نکات منفی این دیزاین پترن: 

+ پیچیدگی بیشتر برای پروژه‌های کوچک و ساده.
+ نیاز به هماهنگی دقیق بین اجزاء مدل، نما و کنترل‌گر.

---

### الگوی لایه‌ای (Layered Pattern)

الگوی **لایه‌ای** سیستم را به لایه‌های مجزا (مانند ارائه، منطق کسب‌وکار، داده و غیره) تقسیم می‌کند. هر لایه تنها با لایه‌های مجاور خود تعامل دارد، که به جداسازی وظایف و افزایش نظم کمک می‌کند.

#### موارد استفاده از این دیزاین پترن:

+ توسعه برنامه‌های سازمانی بزرگ.
+ سیستم‌هایی که نیاز به جداسازی نگرانی‌ها دارند.
+ پروژه‌هایی با نیاز به مقیاس‌پذیری و نگهداری آسان.

####نکات مثبت این دیزاین پترن: 

+ ساختاردهی منظم کد.
+ تسهیل در نگهداری و تست.
+ امکان تغییر یا جایگزینی یک لایه بدون تاثیر بر لایه‌های دیگر.

#### نکات منفی این دیزاین پترن: 

+ ممکن است به کاهش عملکرد منجر شود به دلیل لایه‌های متعدد.
+ پیچیدگی در درک جریان داده‌ها بین لایه‌ها.

---

### الگوی میکروسرویس‌ها (Microservices Pattern)

الگوی **میکروسرویس‌ها** سیستم را به مجموعه‌ای از سرویس‌های کوچک و مستقل تقسیم می‌کند که هر کدام وظیفه خاصی را انجام می‌دهند و از طریق پروتکل‌های سبک ارتباط برقرار می‌کنند.

#### موارد استفاده از این دیزاین پترن:

+ سیستم‌های بزرگ و پیچیده که نیاز به مقیاس‌پذیری بالایی دارند.
+ تیم‌های توسعه متعدد که بر روی بخش‌های مختلف کار می‌کنند.
+ زمانی که نیاز به انتشار و استقرار مستقل اجزاء وجود دارد.

####نکات مثبت این دیزاین پترن: 

+ مقیاس‌پذیری بالا و انعطاف‌پذیری در توسعه.
+ امکان انتخاب فناوری‌های مختلف برای هر سرویس.
+ افزایش تحمل خطا و قابلیت بازیابی.

#### نکات منفی این دیزاین پترن: 

+ پیچیدگی در مدیریت و اورکستراسیون سرویس‌ها.
+ نیاز به زیرساخت‌های پیشرفته و نظارت مداوم.
+ دشواری در آزمون یکپارچگی سیستم.

---

### الگوی مشتری-سرور (Client-Server Pattern)

الگوی **مشتری-سرور** سیستم را به دو بخش اصلی تقسیم می‌کند: مشتری که درخواست‌ها را ارسال می‌کند و سرور که این درخواست‌ها را پردازش و پاسخ می‌دهد.

#### موارد استفاده از این دیزاین پترن:

+ برنامه‌های تحت شبکه مانند وب اپلیکیشن‌ها.
+ سیستم‌هایی که نیاز به تمرکز پردازش در یک یا چند سرور دارند.

####نکات مثبت این دیزاین پترن: 

+ تسهیل در مدیریت و به‌روزرسانی سرور.
+ امکان ارائه خدمات به تعداد زیادی از مشتریان.

#### نکات منفی این دیزاین پترن: 

+ وابستگی زیاد به سرور که می‌تواند نقطه تنگنا باشد.
+ چالش‌های امنیتی در ارتباطات شبکه.

---

### الگوی معماری رویدادمحور (Event-Driven Architecture)

در این الگو، اجزاء سیستم از طریق تولید و مصرف رویدادها با یکدیگر تعامل دارند. رویدادها تغییرات حالت یا وقوع رخدادهای خاص را نشان می‌دهند.

#### موارد استفاده از این دیزاین پترن:

+ سیستم‌های بلادرنگ و واکنش‌گرا.
+ برنامه‌هایی که نیاز به مقیاس‌پذیری بالایی دارند.
+ مدیریت جریان‌های داده‌ای و پردازش رویداد.

####نکات مثبت این دیزاین پترن: 

+ انعطاف‌پذیری و مقیاس‌پذیری بالا.
+ کاهش اتصال بین اجزاء سیستم.
+ تسهیل در افزودن قابلیت‌های جدید.

#### نکات منفی این دیزاین پترن: 

+ پیچیدگی در ردیابی و اشکال‌زدایی.
+ نیاز به مدیریت خطاها و تداخل رویدادها.

---

### الگوی لوله و فیلتر (Pipe and Filter Pattern)

در این الگو، داده‌ها از طریق مجموعه‌ای از فیلترها (عملیات) عبور می‌کنند که توسط لوله‌ها به هم متصل شده‌اند. هر فیلتر داده‌ها را پردازش و به فیلتر بعدی ارسال می‌کند.

#### موارد استفاده از این دیزاین پترن:

+ پردازش جریان‌های داده‌ای مانند پردازش صدا و تصویر.
+ سیستم‌هایی که نیاز به تبدیل‌های متعدد بر روی داده‌ها دارند.

####نکات مثبت این دیزاین پترن: 

+ تسهیل در اضافه یا حذف فیلترها.
+ قابلیت استفاده مجدد از فیلترهای مستقل.
+ سادگی در درک جریان داده‌ها.

#### نکات منفی این دیزاین پترن: 

+ ممکن است منجر به کاهش عملکرد شود.
+ مدیریت خطاها بین فیلترها می‌تواند پیچیده باشد.

---

### الگوی بروکر (Broker Pattern)

الگوی **بروکر** اجزاء توزیع‌شده را از طریق یک واسطه (بروکر) به هم متصل می‌کند. بروکر مسیریابی ارتباطات، هماهنگی و انتقال پیام‌ها را مدیریت می‌کند.

#### موارد استفاده از این دیزاین پترن:

+ سیستم‌های توزیع‌شده و چندلایه.
+ زمانی که نیاز به ارتباط بین اجزاء مستقل دارید.

####نکات مثبت این دیزاین پترن: 

+ جداسازی اجزاء و کاهش وابستگی مستقیم.
+ مقیاس‌پذیری و انعطاف‌پذیری بالا.

#### نکات منفی این دیزاین پترن: 

+ پیچیدگی در پیاده‌سازی و مدیریت بروکر.
+ وابستگی سیستم به عملکرد بروکر.

---

### الگوی معماری شش‌ضلعی (Hexagonal Architecture)

این الگو، همچنین به عنوان **پورت‌ها و آداپتور‌ها** شناخته می‌شود، بر جداسازی منطق کسب‌وکار از لایه‌های زیرساختی تأکید دارد. ارتباط بین داخل و خارج سیستم از طریق پورت‌ها و آداپتور‌ها انجام می‌شود.

#### موارد استفاده از این دیزاین پترن:

+ توسعه سیستم‌های قابل تست و نگهداری.
+ زمانی که نیاز به انعطاف در تغییرات زیرساختی دارید.

####نکات مثبت این دیزاین پترن: 

+ افزایش قابلیت تست و استقلال از فناوری‌ها.
+ تسهیل در افزودن یا تغییر رابط‌های کاربری و دیتابیس‌ها.

#### نکات منفی این دیزاین پترن: 

+ ممکن است برای پروژه‌های کوچک پیچیده باشد.
+ نیاز به درک عمیق از معماری برای پیاده‌سازی صحیح.

---

### الگوی فرمان-پرسش جداسازی مسئولیت‌ها (CQRS)

الگوی **CQRS** توصیه می‌کند که عملیات‌های خواندن (پرسش) و نوشتن (فرمان) بر روی یک مدل داده مشترک انجام نشوند و به جای آن از مدل‌های جداگانه استفاده شود.

#### موارد استفاده از این دیزاین پترن:

+ سیستم‌هایی با نیاز به مقیاس‌پذیری بالا در خواندن و نوشتن.
+ زمانی که مدل‌های خواندن و نوشتن نیازهای متفاوتی دارند.

####نکات مثبت این دیزاین پترن: 

+ بهینه‌سازی عملکرد برای عملیات‌های خواندن و نوشتن.
+ جداسازی نگرانی‌ها و افزایش انعطاف‌پذیری.

#### نکات منفی این دیزاین پترن: 

+ افزایش پیچیدگی سیستم.
+ نیاز به هماهنگی و همگام‌سازی بین مدل‌های داده.

---

### الگوی ذخیره رویدادها (Event Sourcing)

در این الگو، به جای ذخیره حالت فعلی، تمامی تغییرات و رویدادهایی که به سیستم اعمال شده‌اند ذخیره می‌شوند. حالت سیستم با بازپخش این رویدادها بازسازی می‌شود.

#### موارد استفاده از این دیزاین پترن:

+ سیستم‌هایی که نیاز به ردیابی کامل تغییرات دارند.
+ زمانی که نیاز به قابلیت بازگردانی یا تحلیل تاریخچه است.

####نکات مثبت این دیزاین پترن: 

+ نگهداری تاریخچه کامل تغییرات.
+ امکان بازسازی هر حالت تاریخی.

#### نکات منفی این دیزاین پترن: 

+ پیچیدگی در مدیریت و ذخیره‌سازی رویدادها.
+ نیاز به استراتژی‌های مهاجرت داده‌ها در طول زمان.

---

### الگوی مدل-نما-ویومدل (Model-View-ViewModel - MVVM)

الگوی **MVVM** برای جداسازی توسعه رابط کاربری (نما) از منطق کسب‌وکار و داده‌ها (مدل) از طریق یک جزء واسط به نام ویومدل استفاده می‌شود.

#### موارد استفاده از این دیزاین پترن:

+ توسعه برنامه‌های دسکتاپ و موبایل با رابط‌های کاربری پیچیده.
+ زمانی که نیاز به دوطرفه بودن ارتباط بین نما و مدل دارید.

####نکات مثبت این دیزاین پترن: 

+ تسهیل در تست واحد.
+ جداسازی بهتر کد و افزایش قابلیت نگهداری.

#### نکات منفی این دیزاین پترن: 

+ ممکن است پیچیدگی را افزایش دهد.
+ نیاز به ابزارها و فریمورک‌های خاص برای پیاده‌سازی.

---

### الگوی معماری پاک (Clean Architecture)

این الگو بر جداسازی کامل لایه‌های مختلف سیستم تأکید دارد، به طوری که وابستگی‌ها از لایه‌های خارجی به سمت لایه‌های داخلی (منطق کسب‌وکار) معطوف شوند.

#### موارد استفاده از این دیزاین پترن:

+ سیستم‌هایی که نیاز به طول عمر بالا و نگهداری آسان دارند.
+ پروژه‌هایی که نیاز به استقلال از جزئیات زیرساختی دارند.

####نکات مثبت این دیزاین پترن: 

+ افزایش قابلیت تست و نگهداری.
+ استقلال از فریمورک‌ها و کتابخانه‌های خارجی.

#### نکات منفی این دیزاین پترن: 

+ ممکن است برای تیم‌های کوچک و پروژه‌های ساده پیچیده باشد.
+ نیاز به زمان و منابع بیشتر برای طراحی و پیاده‌سازی.

---

## الگوهای همروندی (Concurrency Patterns)

### الگوی استخر رشته‌ها (Thread Pool Pattern)

الگوی **استخر رشته‌ها** مجموعه‌ای از رشته‌های از پیش ایجاد شده را مدیریت می‌کند که برای انجام وظایف مختلف مورد استفاده قرار می‌گیرند، به جای ایجاد و از بین بردن رشته‌ها برای هر وظیفه.

#### موارد استفاده از این دیزاین پترن:

+ زمانی که نیاز به اجرای همزمان تعداد زیادی وظیفه دارید.
+ برای بهبود عملکرد و مدیریت منابع سیستم.

####نکات مثبت این دیزاین پترن: 

+ کاهش هزینه‌های سربار ایجاد رشته‌ها.
+ کنترل بهتر بر تعداد رشته‌های فعال.

#### نکات منفی این دیزاین پترن: 

+ پیچیدگی در مدیریت صف وظایف.
+ ممکن است منجر به بن‌بست یا شرایط مسابقه شود.

---

### الگوی آینده (Future Pattern)

الگوی **آینده** نتیجه یک محاسبه همزمان که در آینده در دسترس خواهد بود را نمایندگی می‌کند. به شما اجازه می‌دهد نتیجه را بعداً بازیابی کنید.

#### موارد استفاده از این دیزاین پترن:

+ زمانی که می‌خواهید عملیات‌های غیرمسدود‌کننده داشته باشید.
+ برای بهبود پاسخگویی برنامه با اجرای وظایف در پس‌زمینه.

####نکات مثبت این دیزاین پترن: 

+ افزایش کارایی و بهره‌وری.
+ ساده‌سازی کدهای همزمان.

#### نکات منفی این دیزاین پترن: 

+ پیچیدگی در مدیریت حالات خطا.
+ نیاز به مکانیزم‌هایی برای همگام‌سازی نتایج.

---

### الگوی قفل خواندن-نوشتن (Read-Write Lock Pattern)

این الگو امکان خواندن همزمان داده‌ها توسط چندین رشته را فراهم می‌کند، اما نوشتن را تنها به یک رشته در هر زمان محدود می‌کند.

#### موارد استفاده از این دیزاین پترن:

+ زمانی که عملیات‌های خواندن از نوشتن بسیار بیشتر است.
+ برای بهبود عملکرد در دسترسی به منابع مشترک.

####نکات مثبت این دیزاین پترن: 

+ افزایش همزمانی در خواندن داده‌ها.
+ حفظ یکپارچگی داده‌ها هنگام نوشتن.

#### نکات منفی این دیزاین پترن: 

+ پیچیدگی در پیاده‌سازی.
+ احتمال بن‌بست یا گرسنگی رشته‌ها.

---

### الگوی فعال (Active Object Pattern)

الگوی **فعال** از صف‌های درخواست و رشته‌های مستقل برای جداسازی اجرای متدها از فراخوانی آن‌ها استفاده می‌کند، که منجر به اجرای همزمان می‌شود.

#### موارد استفاده از این دیزاین پترن:

+ سیستم‌های توزیع‌شده و بلادرنگ.
+ زمانی که نیاز به هماهنگی بین اشیاء فعال دارید.

####نکات مثبت این دیزاین پترن: 

+ ساده‌سازی کدهای همزمان.
+ افزایش پاسخگویی سیستم.

#### نکات منفی این دیزاین پترن: 

+ افزایش سربار در مدیریت صف‌ها.
+ پیچیدگی در اشکال‌زدایی و تست.

---

### الگوی قفل دوبل (Double-Checked Locking Pattern)

این الگو از بررسی‌های دوتایی برای کاهش هزینه‌های همگام‌سازی استفاده می‌کند. ابتدا بدون قفل بررسی می‌کند و سپس با قفل اگر لازم باشد.

#### موارد استفاده از این دیزاین پترن:

+ پیاده‌سازی تک‌نمونه‌ها در محیط‌های چند‌رشته‌ای.
+ بهبود عملکرد در دسترسی به منابع مشترک.

####نکات مثبت این دیزاین پترن: 

+ کاهش هزینه‌های همگام‌سازی.
+ بهبود کارایی در شرایط پر تراکم.

#### نکات منفی این دیزاین پترن: 

+ ممکن است در برخی زبان‌ها یا پلتفرم‌ها به درستی کار نکند.
+ پیچیدگی در درک و پیاده‌سازی صحیح.

---

### الگوی آینده ناهمزمان (Asynchronous Future Pattern)

این الگو ترکیبی از الگوی آینده با برنامه‌نویسی ناهمزمان است که به شما اجازه می‌دهد عملیات‌های غیرمسدود‌کننده را با استفاده از **async/await** مدیریت کنید.

#### موارد استفاده از این دیزاین پترن:

+ برنامه‌های رویدادمحور و ایستگاه‌های کاری.
+ زمانی که نیاز به عملیات‌های ورودی/خروجی غیرمسدود‌کننده دارید.

####نکات مثبت این دیزاین پترن: 

+ افزایش خوانایی کدهای ناهمزمان.
+ بهبود پاسخگویی برنامه.

#### نکات منفی این دیزاین پترن: 

+ نیاز به پشتیبانی زبان یا فریمورک.
+ ممکن است مدیریت خطاها پیچیده‌تر شود.

---

### الگوی صف پیام (Message Queue Pattern)

در این الگو، ارتباطات بین اجزاء از طریق صف‌های پیام انجام می‌شود، که امکان ارسال و دریافت پیام‌ها به صورت آسنکرون را فراهم می‌کند.

#### موارد استفاده از این دیزاین پترن:

+ سیستم‌های توزیع‌شده و متمرکز بر رویداد.
+ زمانی که نیاز به جداسازی فرستنده و گیرنده دارید.

####نکات مثبت این دیزاین پترن: 

+ افزایش مقیاس‌پذیری و انعطاف‌پذیری.
+ کاهش اتصال بین اجزاء.

#### نکات منفی این دیزاین پترن: 

+ نیاز به مدیریت صف‌ها و تضمین تحویل پیام.
+ پیچیدگی در همگام‌سازی و ترتیب پیام‌ها.

---

### الگوی واکنش‌گرا (Reactor Pattern)

الگوی **واکنش‌گرا** یک جایگزین ناهمگام برای مدیریت رویدادها و درخواست‌های ورودی/خروجی است که از حلقه رویداد و توابع بازگشتی استفاده می‌کند.

#### موارد استفاده از این دیزاین پترن:

+ سرورهای با کارایی بالا و نیاز به مقیاس‌پذیری.
+ برنامه‌هایی که نیاز به مدیریت تعداد زیادی اتصال همزمان دارند.

####نکات مثبت این دیزاین پترن: 

+ بهبود عملکرد و کاهش مصرف منابع.
+ مدیریت موثر رویدادهای همزمان.

#### نکات منفی این دیزاین پترن: 

+ پیچیدگی در پیاده‌سازی و نگهداری.
+ سختی در درک جریان برنامه برای توسعه‌دهندگان.

---

### الگوی رهبر-پیرو (Leader-Follower Pattern)

در این الگو، یک رشته به عنوان رهبر وظیفه پذیرش رویدادها را بر عهده دارد و باقی رشته‌ها به عنوان پیرو منتظر می‌مانند. پس از پردازش، نقش‌ها می‌توانند تغییر کنند.

#### موارد استفاده از این دیزاین پترن:

+ سیستم‌هایی با نیاز به عملکرد بالا و تأخیر کم.
+ سرورهای چندرشته‌ای که نیاز به مدیریت مؤثر رویدادها دارند.

####نکات مثبت این دیزاین پترن: 

+ بهبود مقیاس‌پذیری و کاهش تأخیر.
+ توزیع بار کاری بین رشته‌ها.

#### نکات منفی این دیزاین پترن: 

+ پیچیدگی در پیاده‌سازی.
+ نیاز به هماهنگی دقیق بین رشته‌ها.

---

### الگوی پروسر کار (Worker Pool Pattern)

این الگو وظایف را بین مجموعه‌ای از کارگران (رشته‌ها یا فرآیندها) توزیع می‌کند که به صورت موازی کار می‌کنند تا عملکرد را بهبود بخشند.

#### موارد استفاده از این دیزاین پترن:

+ زمانی که نیاز به پردازش تعداد زیادی وظیفه کوچک دارید.
+ برای بهبود استفاده از منابع سیستمی.

####نکات مثبت این دیزاین پترن: 

+ افزایش بهره‌وری و کارایی.
+ سادگی در افزودن یا حذف کارگران.

#### نکات منفی این دیزاین پترن: 

+ پیچیدگی در مدیریت صف وظایف.
+ احتمال شرایط مسابقه و نیاز به همگام‌سازی.

</div>